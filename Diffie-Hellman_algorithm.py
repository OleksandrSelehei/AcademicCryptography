from sympy import randprime

# У практичних реалізаціях для a і b використовуються числа порядку 10 100 і
# p порядку 10 300 (тому що таким чином потрібно підключати бібліотеку Decimal() яка буде навантажувати дуже сильно систему)
# Вибираємо просте число p
print("Просте число p")
# функція randprime знаходить випадкове просте число p таке, що 2**255 <= p < 2**256.
p = randprime(2**255, 2**256)
print(p)
# Вибираємо генератор g
print("Генератор g")
g = 2
print(g)

# Вибираємо секретний ключ a та обчислюємо A = g^a mod p
# Функція pow це вбудована функція в Python, яка виконує ефективне піднесення числа g до степеня a за модулем p. Використовую цю функцію тому що пришвидшує матиматичну дію.
a = 123456789
A = pow(g, a, p)

# Вибираємо секретний ключ b та обчислюємо B = g^b mod p
b = 987654321
B = pow(g, b, p)

# Обмін публічними ключами
# Абонент 1 надсилає A абоненту 2, абонент 2 надсилає B абоненту 1
print("Публічний ключ А")
print(A)
print("Публічний ключ В")
print(B)
# Обчислення спільного секретного ключа
# Абонент 1 обчислює K = B^a mod p, абонент 2 обчислює K = A^b mod p
K1 = pow(B, a, p)
K2 = pow(A, b, p)

# Перевірка спільного секретного ключа
assert K1 == K2
print("Перевірка секретного ключа")
print(K1 == K2)
print("Секретний ключ К1")
print(K1)
print("Секретний ключ К2")
print(K2)